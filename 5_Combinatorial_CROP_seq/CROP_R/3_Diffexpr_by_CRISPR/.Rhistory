TGFβ_signaling = pathways_col[23],
Oxidative_phosphorylation = pathways_col[32],
INFα_response = pathways_col[42],
Myc_targets = pathways_col[50]
)))
cairo_pdf(file = paste0("R_code/2_DE_conditions_20200908/S3_vs_S2/3_S3_DEGs_recovered_by_sgRNAs_20200908/heatmap_DEGs_59genes_20200908.pdf"),  width = 6.6, height = 10.3)
pheatmap(df[,1:12],angle_col = 90, fontsize_row =9, fontsize_col = 12,
cluster_rows = FALSE, cluster_cols = FALSE,
color = my.colors, breaks = my.breaks,
border_color = NA,legend_labels = TRUE,
annotation_col = my_sample_col,
annotation_row  = my_gene_col,
annotation_colors = list(Groups = c(DEGs_induced_by_TGFβ1="Red",DEGs_recovered_by_sgRNAs="blue"),
Clusters = c( N = "white", Cluster_1 = "#5f57db", Cluster_2 = "#db5f57", Not_assigned = "#cccccc"),
Pathways = c(EMT = pathways_col[6],
Hypoxia = pathways_col[11],
TGFβ_signaling = pathways_col[23],
Oxidative_phosphorylation = pathways_col[32],
INFα_response = pathways_col[42],
Myc_targets = pathways_col[50]
)))
dev.off()
cairo_pdf(file = paste0("R_code/2_DE_conditions_20200908/S3_vs_S2/3_S3_DEGs_recovered_by_sgRNAs_20200908/heatmap_DEGs_59genes_20200908.pdf"),  width = 6.6, height = 10.3)
pheatmap(df[,1:12],angle_col = 90, fontsize_row =9, fontsize_col = 12,
cluster_rows = FALSE, cluster_cols = FALSE,
color = my.colors, breaks = my.breaks,
border_color = NA,legend_labels = TRUE,
annotation_col = my_sample_col,
annotation_row  = my_gene_col,
annotation_colors = list(Groups = c(DEGs_induced_by_TGFβ1="Red",DEGs_recovered_by_sgRNAs="blue"),
Clusters = c( N = "white", Cluster_1 = "#db5f57", Cluster_2 = "#5f57db", Not_assigned = "#cccccc"),
Pathways = c(EMT = pathways_col[6],
Hypoxia = pathways_col[11],
TGFβ_signaling = pathways_col[23],
Oxidative_phosphorylation = pathways_col[32],
INFα_response = pathways_col[42],
Myc_targets = pathways_col[50]
)))
dev.off()
cairo_pdf(file = paste0("R_code/2_DE_conditions_20200908/S3_vs_S2/3_S3_DEGs_recovered_by_sgRNAs_20200908/heatmap_DEGs_59genes_20200908.pdf"),  width = 6.6, height = 10.3)
pheatmap(df[,1:12],angle_col = 90, fontsize_row =9, fontsize_col = 12,
cluster_rows = FALSE, cluster_cols = FALSE,
color = my.colors, breaks = my.breaks,
border_color = NA,legend_labels = TRUE,
annotation_col = my_sample_col,
annotation_row  = my_gene_col,
annotation_colors = list(Groups = c(DEGs_induced_by_TGFβ1="Red",DEGs_recovered_by_sgRNAs="blue"),
Clusters = c( N = "white", Cluster_1 = "#db5f57", Cluster_2 = "#5f57db", Not_assigned = "#cccccc"),
Pathways = c(EMT = pathways_col[6],
Hypoxia = pathways_col[10],
TGFβ_signaling = pathways_col[14],
Oxidative_phosphorylation = pathways_col[40],
INFα_response = pathways_col[45],
Myc_targets = pathways_col[50]
)))
dev.off()
cairo_pdf(file = paste0("R_code/2_DE_conditions_20200908/S3_vs_S2/3_S3_DEGs_recovered_by_sgRNAs_20200908/heatmap_DEGs_59genes_20200908.pdf"),  width = 6.6, height = 10.3)
pheatmap(df[,1:12],angle_col = 90, fontsize_row =9, fontsize_col = 12,
cluster_rows = FALSE, cluster_cols = FALSE,
color = my.colors, breaks = my.breaks,
border_color = NA,legend_labels = TRUE,
annotation_col = my_sample_col,
annotation_row  = my_gene_col,
annotation_colors = list(Groups = c(DEGs_induced_by_TGFβ1="Red",DEGs_recovered_by_sgRNAs="blue"),
Clusters = c( N = "white", Cluster_1 = "#db5f57", Cluster_2 = "#5f57db", Not_assigned = "#cccccc"),
Pathways = c(EMT = pathways_col[6],
Hypoxia = pathways_col[10],
TGFβ_signaling = pathways_col[14],
Oxidative_phosphorylation = pathways_col[25],
INFα_response = pathways_col[40],
Myc_targets = pathways_col[50]
)))
dev.off()
dev.off()
cairo_pdf(file = paste0("R_code/2_DE_conditions_20200908/S3_vs_S2/3_S3_DEGs_recovered_by_sgRNAs_20200908/heatmap_DEGs_59genes_20200908.pdf"),  width = 6.6, height = 10.3)
pheatmap(df[,1:12],angle_col = 90, fontsize_row =9, fontsize_col = 12,
cluster_rows = FALSE, cluster_cols = FALSE,
color = my.colors, breaks = my.breaks,
border_color = NA,legend_labels = TRUE,
annotation_col = my_sample_col,
annotation_row  = my_gene_col,
annotation_colors = list(Groups = c(DEGs_induced_by_TGFβ1="Red",DEGs_recovered_by_sgRNAs="blue"),
Clusters = c( N = "white", Cluster_1 = "#db5f57", Cluster_2 = "#5f57db", Not_assigned = "#cccccc"),
Pathways = c(EMT = pathways_col[6],
Hypoxia = pathways_col[10],
TGFβ_signaling = pathways_col[14],
Oxidative_phosphorylation = pathways_col[25],
INFα_response = pathways_col[40],
Myc_targets = pathways_col[50]
)))
dev.off()
cairo_pdf(file = paste0("R_code/2_DE_conditions_20200908/S3_vs_S2/3_S3_DEGs_recovered_by_sgRNAs_20200908/heatmap_DEGs_59genes_20200908.pdf"),  width = 6.6, height = 10.3)
pheatmap(df[,1:12],angle_col = 90, fontsize_row =9, fontsize_col = 12,
cluster_rows = FALSE, cluster_cols = FALSE,
color = my.colors, breaks = my.breaks,
border_color = NA,legend_labels = TRUE,
annotation_col = my_sample_col,
annotation_row  = my_gene_col,
annotation_colors = list(Groups = c(DEGs_induced_by_TGFβ1="Red",DEGs_recovered_by_sgRNAs="blue"),
Clusters = c( N = "white", Cluster_1 = "#db5f57", Cluster_2 = "#5f57db", Not_assigned = "#cccccc"),
Pathways = c(EMT = pathways_col[6],
Hypoxia = pathways_col[10],
TGFβ_signaling = pathways_col[14],
Oxidative_phosphorylation = pathways_col[25],
INFα_response = pathways_col[40],
Myc_targets = pathways_col[50]
)))
dev.off()
pheatmap(df[,1:12],angle_col = 90, fontsize_row =9, fontsize_col = 12,
cluster_rows = FALSE, cluster_cols = FALSE,
color = my.colors, breaks = my.breaks,
border_color = NA,legend_labels = TRUE,
annotation_col = my_sample_col,
annotation_row  = my_gene_col,
annotation_colors = list(Groups = c(DEGs_induced_by_TGFβ1="Red",DEGs_recovered_by_sgRNAs="blue"),
Clusters = c( N = "white", Cluster_1 = "#db5f57", Cluster_2 = "#5f57db", Not_assigned = "#cccccc"),
Pathways = c(EMT = pathways_col[6],
Hypoxia = pathways_col[10],
TGFβ_signaling = pathways_col[14],
Oxidative_phosphorylation = pathways_col[25],
INFα_response = pathways_col[40],
Myc_targets = pathways_col[50]
)))
cairo_pdf(file = paste0("R_code/2_DE_conditions_20200908/S3_vs_S2/3_S3_DEGs_recovered_by_sgRNAs_20200908/heatmap_DEGs_59genes_20200908.pdf"),  width = 6.6, height = 10.3)
pheatmap(df[,1:12],angle_col = 90, fontsize_row =9, fontsize_col = 12,
cluster_rows = FALSE, cluster_cols = FALSE,
color = my.colors, breaks = my.breaks,
border_color = NA,legend_labels = TRUE,
annotation_col = my_sample_col,
annotation_row  = my_gene_col,
annotation_colors = list(Groups = c(DEGs_induced_by_TGFβ1="Red",DEGs_recovered_by_sgRNAs="blue"),
Clusters = c( N = "white", Cluster_1 = "#db5f57", Cluster_2 = "#5f57db", Not_assigned = "#cccccc"),
Pathways = c(EMT = pathways_col[6],
Hypoxia = pathways_col[10],
TGFβ_signaling = pathways_col[14],
Oxidative_phosphorylation = pathways_col[25],
INFα_response = pathways_col[40],
Myc_targets = pathways_col[50]
)))
dev.off()
df = rbind(readM_gs1[readM_gs1$S3_vs_S2 > cut.pos,],
readM_gs2[readM_gs2$S3_vs_S2 > cut.pos,],
readM_gs3[readM_gs3$S3_vs_S2 > cut.pos,],
readM_gs4[readM_gs4$S3_vs_S2 < cut.neg,],
readM_gs5[readM_gs5$S3_vs_S2 < cut.neg,],
readM_gs6[readM_gs6$S3_vs_S2 < cut.neg,]
#readM_gs7[readM_gs7$S3_vs_S2 < cut.neg,]
)
cairo_pdf(file = paste0("R_code/2_DE_conditions_20200908/S3_vs_S2/3_S3_DEGs_recovered_by_sgRNAs_20200908/heatmap_DEGs_84genes_20200908.pdf"),  width = 6.6, height = 10.3)
pheatmap(df[,1:12],angle_col = 90, fontsize_row =9, fontsize_col = 12,
cluster_rows = FALSE, cluster_cols = FALSE,
color = my.colors, breaks = my.breaks,
border_color = NA,legend_labels = TRUE,
annotation_col = my_sample_col,
annotation_row  = my_gene_col,
annotation_colors = list(Groups = c(DEGs_induced_by_TGFβ1="Red",DEGs_recovered_by_sgRNAs="blue"),
Clusters = c( N = "white", Cluster_1 = "#db5f57", Cluster_2 = "#5f57db", Not_assigned = "#cccccc"),
Pathways = c(EMT = pathways_col[6],
Hypoxia = pathways_col[10],
TGFβ_signaling = pathways_col[14],
Oxidative_phosphorylation = pathways_col[25],
INFα_response = pathways_col[40],
Myc_targets = pathways_col[50]
)))
dev.off()
dev.off()
cairo_pdf(file = paste0("R_code/2_DE_conditions_20200908/S3_vs_S2/3_S3_DEGs_recovered_by_sgRNAs_20200908/heatmap_DEGs_84genes_20200908.pdf"),  width = 6.6, height = 10.3)
pheatmap(df[,1:12],angle_col = 90, fontsize_row =9, fontsize_col = 12,
cluster_rows = FALSE, cluster_cols = FALSE,
color = my.colors, breaks = my.breaks,
border_color = NA,legend_labels = TRUE,
annotation_col = my_sample_col,
annotation_row  = my_gene_col,
annotation_colors = list(Groups = c(DEGs_induced_by_TGFβ1="Red",DEGs_recovered_by_sgRNAs="blue"),
Clusters = c( N = "white", Cluster_1 = "#db5f57", Cluster_2 = "#5f57db", Not_assigned = "#cccccc"),
Pathways = c(EMT = pathways_col[6],
Hypoxia = pathways_col[10],
TGFβ_signaling = pathways_col[14],
Oxidative_phosphorylation = pathways_col[25],
INFα_response = pathways_col[40],
Myc_targets = pathways_col[50]
)))
dev.off()
cairo_pdf("R_code/2_DE_conditions_20200908/S3_vs_S2/3_S3_DEGs_recovered_by_sgRNAs_20200908/Intersected.DEGs.recovered.by.sgRNAs_20200908.pdf", width =8, height =4)
upset(readM_S, nsets = 11, keep.order = T, nintersects = NA,sets.bar.color = "#007AFF", sets.x.label = "No. of TGFβ1 induced DEGs\nrecovered by sgRNAs",
main.bar.color = "#007AFF", point.size = 1.6, line.size = 0.8, set_size.show = T, text.scale = c(1.1,1.3,1.1,1.,1.,1.5), mb.ratio = c(0.55,0.45))
dev.off()
#Identify which gene expression were reversed by each sgRNA
a = rownames(readM_L[which(abs(readM_L[,2]) > 0.1 & readM_L[,2]*readM_L[,1] < 0),])
b = rownames(readM_L[which(abs(readM_L[,3]) > 0.1 & readM_L[,3]*readM_L[,1] < 0),])
c = rownames(readM_L[which(abs(readM_L[,4]) > 0.1 & readM_L[,4]*readM_L[,1] < 0),])
d = rownames(readM_L[which(abs(readM_L[,5]) > 0.1 & readM_L[,5]*readM_L[,1] < 0),])
e = rownames(readM_L[which(abs(readM_L[,6]) > 0.1 & readM_L[,6]*readM_L[,1] < 0),])
f = rownames(readM_L[which(abs(readM_L[,7]) > 0.1 & readM_L[,7]*readM_L[,1] < 0),])
g = rownames(readM_L[which(abs(readM_L[,8]) > 0.1 & readM_L[,8]*readM_L[,1] < 0),])
h = rownames(readM_L[which(abs(readM_L[,9]) > 0.1 & readM_L[,9]*readM_L[,1] < 0),])
i = rownames(readM_L[which(abs(readM_L[,10]) > 0.1 & readM_L[,10]*readM_L[,1] < 0),])
j = rownames(readM_L[which(abs(readM_L[,11]) > 0.1 & readM_L[,11]*readM_L[,1] < 0),])
k = rownames(readM_L[which(abs(readM_L[,12]) > 0.1 & readM_L[,12]*readM_L[,1] < 0),])
comM2 = unique(unlist(c(a, b, c, d, e, f, g, h, i, j, k)))
length(comM2)  #401 growth-factor related genes were reversed by sgRNAs
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#----------------------------------V. Upset diagrame showing the overlapping DEGs reversed by sgRNAs----------------------------------------
readM_S0 = readM_L[comM2,1:12]
readM_S1 = readM_S0[which(readM_S0$S3_vs_S2 < 0), 2:12]
dim(readM_S1)
readM_S2 = readM_S0[which(readM_S0$S3_vs_S2 > 0), 2:12]
dim(readM_S2)
readM_S = readM_S0[,2:12]
dim(readM_S)
#readM_S1_M = matrix(0, nrow(readM_S1), ncol(readM_S1))
#rownames(readM_S1_M) = rownames(readM_S1)
#rownames(readM_S1_M) = rownames(readM_S1)
readM_S[abs(readM_S) > 0.1 & readM_S*readM_S0[,1] < 0] = 1
readM_S[readM_S != 1] = 0
readM_S$sum = rowSums(readM_S)
upset(readM_S, nsets = 11, keep.order = T, nintersects = NA,sets.bar.color = "#007AFF", sets.x.label = "No. of TGFβ1 induced DEGs\nrecovered by sgRNAs",
main.bar.color = "#007AFF", point.size = 1.6, line.size = 0.8, set_size.show = T, text.scale = c(1.1,1.3,1.1,1.,1.,1.5), mb.ratio = c(0.55,0.45))
View(readM_S)
View(readM_S)
readM_S0 = readM_L[comM2,1:12]
readM_S1 = readM_S0[which(readM_S0$S3_vs_S2 < 0), 2:12]
dim(readM_S1)
readM_S2 = readM_S0[which(readM_S0$S3_vs_S2 > 0), 2:12]
dim(readM_S2)
readM_S = readM_S0[,2:12]
dim(readM_S)
#readM_S1_M = matrix(0, nrow(readM_S1), ncol(readM_S1))
#rownames(readM_S1_M) = rownames(readM_S1)
#rownames(readM_S1_M) = rownames(readM_S1)
readM_S[abs(readM_S) > 0.1 & readM_S*readM_S0[,1] < 0] = 1
readM_S[readM_S != 1] = 0
upset(readM_S, nsets = 11, keep.order = T, nintersects = NA,sets.bar.color = "#007AFF", sets.x.label = "No. of TGFβ1 induced DEGs\nrecovered by sgRNAs",
main.bar.color = "#007AFF", point.size = 1.6, line.size = 0.8, set_size.show = T, text.scale = c(1.1,1.3,1.1,1.,1.,1.5), mb.ratio = c(0.55,0.45))
View(readM_S)
readM_S0 = readM_L[comM2,1:12]
readM_S1 = readM_S0[which(readM_S0$S3_vs_S2 < 0), 2:12]
dim(readM_S1)
readM_S2 = readM_S0[which(readM_S0$S3_vs_S2 > 0), 2:12]
dim(readM_S2)
readM_S = readM_S0[,2:12]
dim(readM_S)
#readM_S1_M = matrix(0, nrow(readM_S1), ncol(readM_S1))
#rownames(readM_S1_M) = rownames(readM_S1)
#rownames(readM_S1_M) = rownames(readM_S1)
readM_S[abs(readM_S) > 0.1 & readM_S*readM_S0[,1] < 0] = 1
readM_S[readM_S != 1] = 0
readM_S$sum = rowSums(readM_S)
#readM_S1_M[readM_S1_M >= -0.1] = 0
write.csv(read_S, "~/Downloads/S3_upset.csv")
readM_S0 = readM_L[comM2,1:12]
readM_S1 = readM_S0[which(readM_S0$S3_vs_S2 < 0), 2:12]
dim(readM_S1)
readM_S2 = readM_S0[which(readM_S0$S3_vs_S2 > 0), 2:12]
dim(readM_S2)
readM_S = readM_S0[,2:12]
dim(readM_S)
#readM_S1_M = matrix(0, nrow(readM_S1), ncol(readM_S1))
#rownames(readM_S1_M) = rownames(readM_S1)
#rownames(readM_S1_M) = rownames(readM_S1)
readM_S[abs(readM_S) > 0.1 & readM_S*readM_S0[,1] < 0] = 1
readM_S[readM_S != 1] = 0
readM_S$sum = rowSums(readM_S)
#readM_S1_M[readM_S1_M >= -0.1] = 0
write.csv(readM_S, "~/Downloads/S3_upset.csv")
#----------------------------------V. Upset diagrame showing the overlapping DEGs reversed by sgRNAs----------------------------------------
readM_S0 = readM_L[comM2,1:12]
readM_S1 = readM_S0[which(readM_S0$S3_vs_S2 < 0), 2:12]
dim(readM_S1)
readM_S2 = readM_S0[which(readM_S0$S3_vs_S2 > 0), 2:12]
dim(readM_S2)
readM_S = readM_S0[,2:12]
dim(readM_S)
#readM_S1_M = matrix(0, nrow(readM_S1), ncol(readM_S1))
#rownames(readM_S1_M) = rownames(readM_S1)
#rownames(readM_S1_M) = rownames(readM_S1)
readM_S[abs(readM_S) > 0.1 & readM_S*readM_S0[,1] < 0] = 1
readM_S[readM_S != 1] = 0
readM_S[is.na(readM_S)] = 0
readM_S$sum = rowSums(readM_S)
cairo_pdf("R_code/2_DE_conditions_20200908/S3_vs_S2/3_S3_DEGs_recovered_by_sgRNAs_20200908/Intersected.DEGs.recovered.by.sgRNAs_20200908.pdf", width =8, height =4)
upset(readM_S, nsets = 11, keep.order = T, nintersects = NA,sets.bar.color = "#007AFF", sets.x.label = "No. of TGFβ1 induced DEGs\nrecovered by sgRNAs",
main.bar.color = "#007AFF", point.size = 1.6, line.size = 0.8, set_size.show = T, text.scale = c(1.1,1.3,1.1,1.,1.,1.5), mb.ratio = c(0.55,0.45))
dev.off()
cairo_pdf("R_code/2_DE_conditions_20200908/S3_vs_S2/3_S3_DEGs_recovered_by_sgRNAs_20200908/Intersected.DEGs.recovered.by.sgRNAs_20200908.pdf", width =8, height =4)
upset(readM_S, nsets = 11, keep.order = T, nintersects = NA,sets.bar.color = "#007AFF", sets.x.label = "No. of TGFβ1 induced DEGs\nrecovered by sgRNAs",
main.bar.color = "#007AFF", point.size = 1.6, line.size = 0.8, set_size.show = T,set_size.scale_max=1600, text.scale = c(1.1,1.3,1.1,1.,1.,1.5), mb.ratio = c(0.55,0.45))
dev.off()
cairo_pdf("R_code/2_DE_conditions_20200908/S3_vs_S2/3_S3_DEGs_recovered_by_sgRNAs_20200908/Intersected.DEGs.recovered.by.sgRNAs_20200908.pdf", width =8, height =4)
upset(readM_S, nsets = 11, keep.order = T, nintersects = NA,sets.bar.color = "#007AFF", sets.x.label = "No. of TGFβ1 induced DEGs\nrecovered by sgRNAs",
main.bar.color = "#007AFF", point.size = 1.6, line.size = 0.8, set_size.show = T,set_size.scale_max=1800, text.scale = c(1.1,1.3,1.1,1.,1.,1.5), mb.ratio = c(0.55,0.45))
dev.off()
cairo_pdf(file = paste0("R_code/2_DE_conditions_20200908/S3_vs_S2/3_S3_DEGs_recovered_by_sgRNAs_20200908/heatmap_DEGs_84genes_20200908.pdf"),  width = 6.6, height = 10.3)
pheatmap(df[,1:12],angle_col = 90, fontsize_row =9, fontsize_col = 12,
cluster_rows = FALSE, cluster_cols = FALSE,
color = my.colors, breaks = my.breaks,
border_color = NA,legend_labels = TRUE,
annotation_col = my_sample_col,
annotation_row  = my_gene_col,
annotation_colors = list(Groups = c(DEGs_induced_by_TGFβ1="Red",DEGs_recovered_by_sgRNAs="blue"),
Clusters = c( N = "white", Cluster_1 = "#db5f57", Cluster_2 = "#5f57db", Not_assigned = "#cccccc"),
Pathways = c(EMT = pathways_col[6],
Hypoxia = pathways_col[10],
TGFβ_signaling = pathways_col[14],
Oxidative_phosphorylation = pathways_col[25],
INFα_response = pathways_col[40],
Myc_targets = pathways_col[50]
)))
dev.off()
dev.off()
cairo_pdf(file = paste0("R_code/2_DE_conditions_20200908/S3_vs_S2/3_S3_DEGs_recovered_by_sgRNAs_20200908/heatmap_DEGs_84genes_20200908.pdf"),  width = 6.6, height = 10.3)
pheatmap(df[,1:12],angle_col = 90, fontsize_row =9, fontsize_col = 12,
cluster_rows = FALSE, cluster_cols = FALSE,
color = my.colors, breaks = my.breaks,
border_color = NA,legend_labels = TRUE,
annotation_col = my_sample_col,
annotation_row  = my_gene_col,
annotation_colors = list(Groups = c(DEGs_induced_by_TGFβ1="Red",DEGs_recovered_by_sgRNAs="blue"),
Clusters = c( N = "white", Cluster_1 = "#db5f57", Cluster_2 = "#5f57db", Not_assigned = "#cccccc"),
Pathways = c(EMT = pathways_col[6],
Hypoxia = pathways_col[10],
TGFβ_signaling = pathways_col[14],
Oxidative_phosphorylation = pathways_col[25],
INFα_response = pathways_col[40],
Myc_targets = pathways_col[50]
)))
dev.off()
cairo_pdf(file = paste0("R_code/2_DE_conditions_20200908/S3_vs_S2/3_S3_DEGs_recovered_by_sgRNAs_20200908/heatmap_DEGs_84genes_20200908.pdf"),  width = 6.6, height = 10.3)
pheatmap(df[,1:12],angle_col = 90, fontsize_row =9, fontsize_col = 12,
cluster_rows = FALSE, cluster_cols = FALSE,
color = my.colors, breaks = my.breaks,
border_color = NA,legend_labels = TRUE,
annotation_col = my_sample_col,
annotation_row  = my_gene_col,
annotation_colors = list(Groups = c(DEGs_induced_by_TGFβ1="Red",DEGs_recovered_by_sgRNAs="blue"),
Clusters = c( N = "white", Cluster_1 = "#db5f57", Cluster_2 = "#5f57db", Not_assigned = "#cccccc"),
Pathways = c(EMT = pathways_col[6],
Hypoxia = pathways_col[10],
TGFβ_signaling = pathways_col[14],
Oxidative_phosphorylation = pathways_col[25],
INFα_response = pathways_col[40],
Myc_targets = pathways_col[50]
)))
dev.off()
dev.off()
cairo_pdf(file = paste0("R_code/2_DE_conditions_20200908/S3_vs_S2/3_S3_DEGs_recovered_by_sgRNAs_20200908/heatmap_DEGs_84genes_20200908.pdf"),  width = 6.6, height = 10.3)
pheatmap(df[,1:12],angle_col = 90, fontsize_row =9, fontsize_col = 12,
cluster_rows = FALSE, cluster_cols = FALSE,
color = my.colors, breaks = my.breaks,
border_color = NA,legend_labels = TRUE,
annotation_col = my_sample_col,
annotation_row  = my_gene_col,
annotation_colors = list(Groups = c(DEGs_induced_by_TGFβ1="Red",DEGs_recovered_by_sgRNAs="blue"),
Clusters = c( N = "white", Cluster_1 = "#db5f57", Cluster_2 = "#5f57db", Not_assigned = "#cccccc"),
Pathways = c(EMT = pathways_col[6],
Hypoxia = pathways_col[10],
TGFβ_signaling = pathways_col[14],
Oxidative_phosphorylation = pathways_col[25],
INFα_response = pathways_col[40],
Myc_targets = pathways_col[50]
)))
dev.off()
setwd("~/Desktop/Paper_writing_XYZ_20190401/4_CROPseq_20200820/Python_code/sequencing/")
library(ggpubr)
df2 = read.csv('outs_S2/results/correlation_fitness_and_transcription/correlation_fitness_and_transcription_S2.csv')
ggscatter(df2, x = "log2_de" , y = "fitness", size = 3,
add = "reg.line", conf.int = TRUE,
add.params = list(color = "#007AFF", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE,rug = TRUE,
cor.coeff.args = list(method = "pearson", label.x = 0.5,label.y =0.3, label.sep = "\n", size = 7))+
theme(#panel.border = element_blank(),
panel.grid = element_blank(),
panel.background = element_blank(),
#panel.grid= element_line(linetype = "dashed"),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
#axis.ticks.y = element_line(colour = "black"),
legend.position = 'none',
#legend.position = c(0.75,0.9),
#legend.title = element_text(size = 20, face= "bold"),
legend.text = element_text(size=20),
axis.text.y  =element_text(size=26,color = 'black'),
axis.text.x =element_text(size=26,color = 'black', margin = margin(5,0,0,0)),
axis.title=element_text(size=26,margin = margin(10,0,0,0)),#face="bold")
plot.title = element_text(size=23, hjust= 1, margin = margin(0,0,10,0))
#strip.text  = element_text(size = 16, face="bold")
##strip.text is for facet
)+
scale_x_continuous(limits = c(0,18), breaks = seq(0,15,5))+
scale_y_continuous(limits = c(-0.3,0.4), breaks = seq(-0.2,0.4,0.2))+
labs(title="",x = "Sqrt(no. of DEGs)", y = "Fitness")
setwd("~/Desktop/Paper_writing_XYZ_20200908/5_CROPseq_2020908/Python_code/sequencing/")
setwd("~/Desktop/Paper_writing_XYZ_20200908/5_CROPseq_20200908/Python_code/sequencing/")
library(ggpubr)
df2 = read.csv('outs_S2/results/correlation_fitness_and_transcription/correlation_fitness_and_transcription_S2.csv')
df2['log2_de'] = sqrt(df2['DESeq2_de'])
ggscatter(df2, x = "log2_de" , y = "fitness", size = 3,
add = "reg.line", conf.int = TRUE,
add.params = list(color = "#007AFF", fill = "lightgray"), # Customize reg. line
cor.coef = TRUE,rug = TRUE,
cor.coeff.args = list(method = "pearson", label.x = 0.5,label.y =0.3, label.sep = "\n", size = 7))+
theme(#panel.border = element_blank(),
panel.grid = element_blank(),
panel.background = element_blank(),
#panel.grid= element_line(linetype = "dashed"),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
#axis.ticks.y = element_line(colour = "black"),
legend.position = 'none',
#legend.position = c(0.75,0.9),
#legend.title = element_text(size = 20, face= "bold"),
legend.text = element_text(size=20),
axis.text.y  =element_text(size=26,color = 'black'),
axis.text.x =element_text(size=26,color = 'black', margin = margin(5,0,0,0)),
axis.title=element_text(size=26,margin = margin(10,0,0,0)),#face="bold")
plot.title = element_text(size=23, hjust= 1, margin = margin(0,0,10,0))
#strip.text  = element_text(size = 16, face="bold")
##strip.text is for facet
)+
scale_x_continuous(limits = c(0,18), breaks = seq(0,15,5))+
scale_y_continuous(limits = c(-0.3,0.4), breaks = seq(-0.2,0.4,0.2))+
labs(title="",x = "Sqrt(no. of DEGs)", y = "Fitness")
##Xiaoyu Zhao  20200908
library(Seurat)
library(Matrix)
library(ggplot2)
library(data.table)
setwd("~/Desktop/Paper_writing_XYZ_20200908/5_CROPseq_20200908/R_code/")
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#--------------------- I. Merge four objects into S1234 ----------------------------
gex.S1 <- readRDS( file = "1_Seurat_20200908/objects/gex.S1_20200908.rds") #dim(gex.S1) = (16735, 5864)
gex.S1 <- subset(gex.S1, subset = knock_outs %in% c("control", "SKO", "DKO") & num_guides %in% c(1,2) & nFeature_RNA > 800 & nFeature_RNA < 5000 & percent_mito < 0.1 )
dim(gex.S1)
gex.S2 <- readRDS( file = "1_Seurat_20200908/objects/gex.S2_20200908.rds") #dim(gex.S2) = (16575, 7844)
gex.S2 <- subset(gex.S2, subset = knock_outs %in% c("control", "SKO", "DKO") & num_guides %in% c(1,2) & nFeature_RNA > 800 & nFeature_RNA < 5000 & percent_mito < 0.1 )
dim(gex.S2)
gex.S3 <- readRDS( file = "1_Seurat_20200908/objects/gex.S3_20200908.rds") #dim(gex.S3) = (16975, 6511)
gex.S3 <- subset(gex.S3, subset = knock_outs %in% c("control", "SKO", "DKO") & num_guides %in% c(1,2) & nFeature_RNA > 800 & nFeature_RNA < 5000 & percent_mito < 0.1 )
dim(gex.S3)
gex.S4 <- readRDS( file = "1_Seurat_20200908/objects/gex.S4_20200908.rds") #dim(gex.S4) = (16915, 8364)
gex.S4 <- subset(gex.S4, subset = knock_outs %in% c("control", "SKO", "DKO") & num_guides %in% c(1,2) & nFeature_RNA > 800 & nFeature_RNA < 5000 & percent_mito < 0.1 )
dim(gex.S4)
###
#SKOs in S3
perturbed_vs_CTRL(gex = gex.S3, pb = "NF2-CTRL1", fold = "S3_20200908")
####GSEA(Gene Set Enrichment Assay)
#--------------------- GSEA (Gene Set Enrichment Assay) : Pertubation Vs Control----------------------------
setwd("~/Desktop/Paper_writing_XYZ_20200908/5_CROPseq_20200908/R_code/3_GSEA_SKOs_20200908/")
perturbed_vs_CTRL = function(gex = gex.S4, pb = "NF2-CTRL1", fold = "S4"){
#Output expression data for GSEA
symb = read.csv("symbol_entrezid_CROPseq.csv")
file_name = paste0(pb, "_vs_Control")
path = paste0(getwd(),"/", fold, "/",file_name, "/")
dir.create(path)
gexB <- subset(gex, perturbed == pb)
gexA <- subset(gex, perturbed == "CTRL-CTRL")
d1 <- as.data.frame(as.matrix(GetAssayData(gexB, slot = "counts")))
d2 <- as.data.frame(as.matrix(GetAssayData(gexA, slot = "counts")))
commS = intersect(rownames(d1),rownames(d2))
data <- data.frame(d1[commS,], d2[commS,])
names <- symb[match(rownames(data),symb$V1),]$V2
df <- data.frame(names,rownames(d1[commS,]),d1[commS,],d2[commS,])
colnames(df)[1:2] <- c("NAME","DESCRIPTION")
fwrite(df,row.names = FALSE, file = paste0(path, file_name, ".txt"), sep="\t")
#Output sample information for GSEA
n1 <- ncol(d1)
n2 <- ncol(d2)
nn <- sum(n1,n2)
sampleB = pb
sampleA = "control"
info1 <- NULL
info2 <- NULL
sink(paste0(path, "sampleinfo_", file_name, ".cls"))
cat(paste(nn,2,1,sep="\t"))
cat("\n")
cat(paste("#",sampleB,sampleA,sep="\t"))
cat("\n")
for(i in 1:n1){
info1 <- paste(sampleB,info1,sep="\t")
}
cat(info1)
for(j in 1:n2){
info2 <- paste(sampleA,info2,sep="\t")
}
cat(info2)
sink()
}
#SKOs in S3
perturbed_vs_CTRL(gex = gex.S3, pb = "NF2-CTRL1", fold = "S3_20200908")
perturbed_vs_CTRL(gex = gex.S3, pb = "PTEN-CTRL1", fold = "S3_20200908")
perturbed_vs_CTRL(gex = gex.S3, pb = "SMAD4-CTRL1", fold = "S3_20200908")
perturbed_vs_CTRL(gex = gex.S3, pb = "CBFB-CTRL1", fold = "S3_20200908")
perturbed_vs_CTRL(gex = gex.S3, pb = "TP53-CTRL1", fold = "S3_20200908")
perturbed_vs_CTRL(gex = gex.S3, pb = "NF1-CTRL1", fold = "S3_20200908")
perturbed_vs_CTRL(gex = gex.S3, pb = "CDH1-CTRL1", fold = "S3_20200908")
perturbed_vs_CTRL(gex = gex.S3, pb = "RB1-CTRL1", fold = "S3_20200908")
perturbed_vs_CTRL(gex = gex.S3, pb = "CASP8-CTRL1", fold = "S3_20200908")
perturbed_vs_CTRL(gex = gex.S3, pb = "TBX3-CTRL1", fold = "S3_20200908")
perturbed_vs_CTRL(gex = gex.S3, pb = "USP9X-CTRL1", fold = "S3_20200908")
#SKOs in S4
perturbed_vs_CTRL(gex = gex.S4, pb = "NF2-CTRL1", fold = "S4_20200908")
perturbed_vs_CTRL(gex = gex.S4, pb = "PTEN-CTRL1", fold = "S4_20200908")
perturbed_vs_CTRL(gex = gex.S4, pb = "SMAD4-CTRL1", fold = "S4_20200908")
perturbed_vs_CTRL(gex = gex.S4, pb = "CBFB-CTRL1", fold = "S4_20200908")
perturbed_vs_CTRL(gex = gex.S4, pb = "TP53-CTRL1", fold = "S4_20200908")
perturbed_vs_CTRL(gex = gex.S4, pb = "NF1-CTRL1", fold = "S4_20200908")
perturbed_vs_CTRL(gex = gex.S4, pb = "CDH1-CTRL1", fold = "S4_20200908")
perturbed_vs_CTRL(gex = gex.S4, pb = "RB1-CTRL1", fold = "S4_20200908")
perturbed_vs_CTRL(gex = gex.S4, pb = "CASP8-CTRL1", fold = "S4_20200908")
perturbed_vs_CTRL(gex = gex.S4, pb = "TBX3-CTRL1", fold = "S4_20200908")
perturbed_vs_CTRL(gex = gex.S4, pb = "USP9X-CTRL1", fold = "S4_20200908")
perturbed_vs_CTRL(gex = gex.S4, pb = "TBX3-CTRL1", fold = "S4_20200908")
